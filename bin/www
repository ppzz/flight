#!/usr/bin/env node

/* jshint strict: true */

var app = require('../app');
var debug = require('debug')('flight:server');
var http = require('http');


var _ = require("underscore");
var port = normalizePort(process.env.PORT || '8888');
app.set('port', port);


var server = http.createServer(app);

var io = require("socket.io")(server);

io.on("connect", function (socket) {
  var socketId = socket.client.id;
  console.log('create connection,  id:', socketId);


  socket.on('testEvent', function (data) {
    console.log('receive event: testEvent, \n\tid :', socketId, ' \n\tdata: ', data);

    socket.emit('testEvent2', ' hello world again.')
  });

  socket.on("auth", function (data) {
    console.log("receive event: auth, \n\tid: ", socketId, "\n\tdata: ", data);
    
    
    
  });
  socket.on("disconnect", function () {
    console.log('destory connection, id: ', socketId);
  });
});


server.listen(port);
console.log("listening on port :", port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(port) {
  port = parseInt(port, 10);   //表示将val的值解析成10进制的数字.

  if (isNaN(port)) {
    // named pipe
    return port;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':      // 创建指定类型的套接字失败
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':  // 给定的地址已经被使用
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
